// Generated by purs bundle 0.14.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  exports["map"] = map;
  exports["functorFn"] = functorFn;
})(PS);
(function(exports) {
  "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var discard = function (dict) {
      return dict.discard;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  exports["random"] = $foreign.random;
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };                     

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["pow"] = $foreign.pow;
  exports["sqrt"] = $foreign.sqrt;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  "use strict";
  $PS["Vector"] = $PS["Vector"] || {};
  var exports = $PS["Vector"];
  var $$Math = $PS["Math"];                
  var vSub = function (a) {
      return function (b) {
          return {
              x: a.x - b.x,
              y: a.y - b.y
          };
      };
  };
  var vScale = function (n) {
      return function (a) {
          return {
              x: n * a.x,
              y: n * a.y
          };
      };
  };
  var vLength = function (a) {
      return $$Math.sqrt($$Math.pow(a.x)(2.0) + $$Math.pow(a.y)(2.0));
  };
  var vNormalize = function (a) {
      var l = vLength(a);
      return {
          x: a.x / l,
          y: a.y / l
      };
  };
  var vDot = function (a) {
      return function (b) {
          return a.x * b.x + a.y * b.y;
      };
  };
  var vDistance = function (a) {
      return function (b) {
          return vLength(vSub(a)(b));
      };
  };
  var vDirection = function (a) {
      return function (b) {
          return vNormalize(vSub(a)(b));
      };
  };
  var vAdd = function (a) {
      return function (b) {
          return {
              x: a.x + b.x,
              y: a.y + b.y
          };
      };
  };
  exports["vAdd"] = vAdd;
  exports["vSub"] = vSub;
  exports["vDirection"] = vDirection;
  exports["vDistance"] = vDistance;
  exports["vScale"] = vScale;
  exports["vDot"] = vDot;
})(PS);
(function($PS) {
  "use strict";
  $PS["Ball"] = $PS["Ball"] || {};
  var exports = $PS["Ball"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Random = $PS["Effect.Random"];
  var $$Math = $PS["Math"];
  var Vector = $PS["Vector"];                
  var randomColor = function __do() {
      var r = Data_Functor.map(Effect.functorEffect)(function (v) {
          return v * 255.0;
      })(Effect_Random.random)();
      var g = Data_Functor.map(Effect.functorEffect)(function (v) {
          return v * 255.0;
      })(Effect_Random.random)();
      var b = Data_Functor.map(Effect.functorEffect)(function (v) {
          return v * 255.0;
      })(Effect_Random.random)();
      var a = Data_Functor.map(Effect.functorEffect)(function (x) {
          return 0.5 * x + 0.5;
      })(Effect_Random.random)();
      return "rgba(" + (Data_Show.show(Data_Show.showNumber)(r) + ("," + (Data_Show.show(Data_Show.showNumber)(g) + ("," + (Data_Show.show(Data_Show.showNumber)(b) + ("," + (Data_Show.show(Data_Show.showNumber)(a) + ")")))))));
  };
  var randomBall = function __do() {
      var x = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function (v) {
          return v + 150.0;
      })(function (v) {
          return v * 100.0;
      }))(Effect_Random.random)();
      var y = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function (v) {
          return v + 150.0;
      })(function (v) {
          return v * 100.0;
      }))(Effect_Random.random)();
      var r = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function (v) {
          return v + 5.0;
      })(function (v) {
          return v * 30.0;
      }))(Effect_Random.random)();
      var vx = Data_Functor.map(Effect.functorEffect)(function (v) {
          return v * 0.1;
      })(Effect_Random.random)();
      var vy = Data_Functor.map(Effect.functorEffect)(function (v) {
          return v * 0.1;
      })(Effect_Random.random)();
      var color = randomColor();
      return {
          pos: {
              x: x,
              y: y
          },
          radius: r,
          move: {
              x: vx,
              y: vy
          },
          color: color
      };
  };

  // | 移動
  var move = function (dt) {
      return function (b) {
          return {
              pos: Vector.vAdd(b.pos)(Vector.vScale(dt)(b.move)),
              move: b.move,
              radius: b.radius,
              color: b.color
          };
      };
  };

  // | 反射
  var reflect = function (dt) {
      return function (v) {
          return function (b) {
              var next = (move(dt)(b)).pos;
              var $23 = next.x - b.radius <= 0.0;
              if ($23) {
                  return {
                      pos: {
                          x: b.radius,
                          y: b.pos.y
                      },
                      move: {
                          x: $$Math.abs(b.move.x),
                          y: b.move.y
                      },
                      radius: b.radius,
                      color: b.color
                  };
              };
              var $24 = next.x + b.radius >= v.width;
              if ($24) {
                  return {
                      pos: {
                          x: v.width - b.radius,
                          y: b.pos.y
                      },
                      move: {
                          x: -$$Math.abs(b.move.x),
                          y: b.move.y
                      },
                      radius: b.radius,
                      color: b.color
                  };
              };
              var $25 = next.y - b.radius <= 0.0;
              if ($25) {
                  return {
                      pos: {
                          x: b.pos.x,
                          y: b.radius
                      },
                      move: {
                          x: b.move.x,
                          y: $$Math.abs(b.move.y)
                      },
                      radius: b.radius,
                      color: b.color
                  };
              };
              var $26 = next.y + b.radius >= v.height;
              if ($26) {
                  return {
                      pos: {
                          x: b.pos.x,
                          y: v.height - b.radius
                      },
                      move: {
                          x: b.move.x,
                          y: -$$Math.abs(b.move.y)
                      },
                      radius: b.radius,
                      color: b.color
                  };
              };
              return b;
          };
      };
  };

  // | 衝突
  // http://marupeke296.com/COL_MV_No1_HowToCalcVelocity.html
  var colllisionWith = function (dt) {
      return function (v) {
          var w2 = v.v2.radius * v.v2.radius;
        
          // それぞれの重さ
  var w1 = v.v1.radius * v.v1.radius;
          var next = Vector.vDistance((move(dt)(v.v1)).pos)((move(dt)(v.v2)).pos);
        
          // 反発率
  var e = 1.0;
          var dist = Vector.vDistance(v.v1.pos)(v.v2.pos);
        
          // １から２への向き（標準ベクトル）
  var c = Vector.vDirection(v.v1.pos)(v.v2.pos);
        
          // １から２への相対速度
  var s = Vector.vDot(Vector.vSub(v.v1.move)(v.v2.move))(c);
        
          // 反発後の速度
  var p1 = ((1.0 + e) * -s * w2) / (w1 + w2);
          var p2 = ((1.0 + e) * s * w1) / (w1 + w2);
          var $31 = dist >= next && next <= v.v1.radius + v.v2.radius;
          if ($31) {
              return {
                  v1: {
                      pos: v.v1.pos,
                      move: Vector.vAdd(v.v1.move)(Vector.vScale(p1)(c)),
                      radius: v.v1.radius,
                      color: v.v1.color
                  },
                  v2: {
                      pos: v.v2.pos,
                      move: Vector.vAdd(v.v2.move)(Vector.vScale(p2)(c)),
                      radius: v.v2.radius,
                      color: v.v2.color
                  }
              };
          };
          return {
              v1: v.v1,
              v2: v.v2
          };
      };
  };
  exports["move"] = move;
  exports["reflect"] = reflect;
  exports["colllisionWith"] = colllisionWith;
  exports["randomBall"] = randomBall;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  exports["unwrap"] = unwrap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var Data_Newtype = $PS["Data.Newtype"];              
  var runState = function (v) {
      var $16 = Data_Newtype.unwrap();
      return function ($17) {
          return $16(v($17));
      };
  };
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  exports["runState"] = runState;
  exports["execState"] = execState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify"] = modify;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  };
  var functorStateT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                      })(v(s));
                  };
              };
          }
      };
  };
  var monadStateT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeStateT(dictMonad);
          },
          Bind1: function () {
              return bindStateT(dictMonad);
          }
      };
  };
  var bindStateT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                          var v3 = f(v1.value0);
                          return v3(v1.value1);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var applyStateT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadStateT(dictMonad)),
          Functor0: function () {
              return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeStateT = function (dictMonad) {
      return {
          pure: function (a) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var monadStateStateT = function (dictMonad) {
      return {
          state: function (f) {
              return StateT((function () {
                  var $113 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($114) {
                      return $113(f($114));
                  };
              })());
          },
          Monad0: function () {
              return monadStateT(dictMonad);
          }
      };
  };
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  exports["eqInt"] = eqInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  exports["ordInt"] = ordInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Date.Component"] = $PS["Data.Date.Component"] || {};
  var exports = $PS["Data.Date.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var eqMonth = {
      eq: function (x) {
          return function (y) {
              if (x instanceof January && y instanceof January) {
                  return true;
              };
              if (x instanceof February && y instanceof February) {
                  return true;
              };
              if (x instanceof March && y instanceof March) {
                  return true;
              };
              if (x instanceof April && y instanceof April) {
                  return true;
              };
              if (x instanceof May && y instanceof May) {
                  return true;
              };
              if (x instanceof June && y instanceof June) {
                  return true;
              };
              if (x instanceof July && y instanceof July) {
                  return true;
              };
              if (x instanceof August && y instanceof August) {
                  return true;
              };
              if (x instanceof September && y instanceof September) {
                  return true;
              };
              if (x instanceof October && y instanceof October) {
                  return true;
              };
              if (x instanceof November && y instanceof November) {
                  return true;
              };
              if (x instanceof December && y instanceof December) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordMonth = {
      compare: function (x) {
          return function (y) {
              if (x instanceof January && y instanceof January) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof January) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof January) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof February && y instanceof February) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof February) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof February) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof March && y instanceof March) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof March) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof March) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof April && y instanceof April) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof April) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof April) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof May && y instanceof May) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof May) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof May) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof June && y instanceof June) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof June) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof June) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof July && y instanceof July) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof July) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof July) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof August && y instanceof August) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof August) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof August) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof September && y instanceof September) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof September) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof September) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof October && y instanceof October) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof October) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof October) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof November && y instanceof November) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof November) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof November) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof December && y instanceof December) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqMonth;
      }
  };                        
  var boundedYear = {
      bottom: -271820 | 0,
      top: 275759,
      Ord0: function () {
          return ordYear;
      }
  };
  var boundedMonth = {
      bottom: January.value,
      top: December.value,
      Ord0: function () {
          return ordMonth;
      }
  };
  var boundedEnumYear = {
      cardinality: 547580,
      toEnum: function (n) {
          if (n >= (-271820 | 0) && n <= 275759) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedYear;
      },
      Enum1: function () {
          return enumYear;
      }
  };
  var enumYear = {
      succ: (function () {
          var $46 = Data_Enum.toEnum(boundedEnumYear);
          var $47 = Data_Enum.fromEnum(boundedEnumYear);
          return function ($48) {
              return $46((function (v) {
                  return v + 1 | 0;
              })($47($48)));
          };
      })(),
      pred: (function () {
          var $49 = Data_Enum.toEnum(boundedEnumYear);
          var $50 = Data_Enum.fromEnum(boundedEnumYear);
          return function ($51) {
              return $49((function (v) {
                  return v - 1 | 0;
              })($50($51)));
          };
      })(),
      Ord0: function () {
          return ordYear;
      }
  };
  var boundedEnumMonth = {
      cardinality: 12,
      toEnum: function (v) {
          if (v === 1) {
              return new Data_Maybe.Just(January.value);
          };
          if (v === 2) {
              return new Data_Maybe.Just(February.value);
          };
          if (v === 3) {
              return new Data_Maybe.Just(March.value);
          };
          if (v === 4) {
              return new Data_Maybe.Just(April.value);
          };
          if (v === 5) {
              return new Data_Maybe.Just(May.value);
          };
          if (v === 6) {
              return new Data_Maybe.Just(June.value);
          };
          if (v === 7) {
              return new Data_Maybe.Just(July.value);
          };
          if (v === 8) {
              return new Data_Maybe.Just(August.value);
          };
          if (v === 9) {
              return new Data_Maybe.Just(September.value);
          };
          if (v === 10) {
              return new Data_Maybe.Just(October.value);
          };
          if (v === 11) {
              return new Data_Maybe.Just(November.value);
          };
          if (v === 12) {
              return new Data_Maybe.Just(December.value);
          };
          return Data_Maybe.Nothing.value;
      },
      fromEnum: function (v) {
          if (v instanceof January) {
              return 1;
          };
          if (v instanceof February) {
              return 2;
          };
          if (v instanceof March) {
              return 3;
          };
          if (v instanceof April) {
              return 4;
          };
          if (v instanceof May) {
              return 5;
          };
          if (v instanceof June) {
              return 6;
          };
          if (v instanceof July) {
              return 7;
          };
          if (v instanceof August) {
              return 8;
          };
          if (v instanceof September) {
              return 9;
          };
          if (v instanceof October) {
              return 10;
          };
          if (v instanceof November) {
              return 11;
          };
          if (v instanceof December) {
              return 12;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [ v.constructor.name ]);
      },
      Bounded0: function () {
          return boundedMonth;
      },
      Enum1: function () {
          return enumMonth;
      }
  };
  var enumMonth = {
      succ: (function () {
          var $58 = Data_Enum.toEnum(boundedEnumMonth);
          var $59 = Data_Enum.fromEnum(boundedEnumMonth);
          return function ($60) {
              return $58((function (v) {
                  return v + 1 | 0;
              })($59($60)));
          };
      })(),
      pred: (function () {
          var $61 = Data_Enum.toEnum(boundedEnumMonth);
          var $62 = Data_Enum.fromEnum(boundedEnumMonth);
          return function ($63) {
              return $61((function (v) {
                  return v - 1 | 0;
              })($62($63)));
          };
      })(),
      Ord0: function () {
          return ordMonth;
      }
  };
  var boundedDay = {
      bottom: 1,
      top: 31,
      Ord0: function () {
          return ordDay;
      }
  };
  var boundedEnumDay = {
      cardinality: 31,
      toEnum: function (n) {
          if (n >= 1 && n <= 31) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedDay;
      },
      Enum1: function () {
          return enumDay;
      }
  };
  var enumDay = {
      succ: (function () {
          var $64 = Data_Enum.toEnum(boundedEnumDay);
          var $65 = Data_Enum.fromEnum(boundedEnumDay);
          return function ($66) {
              return $64((function (v) {
                  return v + 1 | 0;
              })($65($66)));
          };
      })(),
      pred: (function () {
          var $67 = Data_Enum.toEnum(boundedEnumDay);
          var $68 = Data_Enum.fromEnum(boundedEnumDay);
          return function ($69) {
              return $67((function (v) {
                  return v - 1 | 0;
              })($68($69)));
          };
      })(),
      Ord0: function () {
          return ordDay;
      }
  };
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["boundedEnumDay"] = boundedEnumDay;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Date"] = $PS["Data.Date"] || {};
  var exports = $PS["Data.Date"];
  var $foreign = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];                                
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var year = function (v) {
      return v.value0;
  };
  var month = function (v) {
      return v.value1;
  };
  var day = function (v) {
      return v.value2;
  };
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  exports["canonicalDate"] = canonicalDate;
  exports["year"] = year;
  exports["month"] = month;
  exports["day"] = day;
})(PS);
(function(exports) {
  "use strict";

  var createUTC = function (y, mo, d, h, m, s, ms) {
    var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date.getTime();
  };

  exports.calcDiff = function (rec1, rec2) {
    var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
    var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
    return msUTC1 - msUTC2;
  };
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Time"] = $PS["Data.Time"] || {};
  var exports = $PS["Data.Time"];          
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();
  var second = function (v) {
      return v.value2;
  };
  var minute = function (v) {
      return v.value1;
  };
  var millisecond = function (v) {
      return v.value3;
  };
  var hour = function (v) {
      return v.value0;
  };
  exports["Time"] = Time;
  exports["hour"] = hour;
  exports["minute"] = minute;
  exports["second"] = second;
  exports["millisecond"] = millisecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Time.Component"] = $PS["Data.Time.Component"] || {};
  var exports = $PS["Data.Time.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var boundedSecond = {
      bottom: 0,
      top: 59,
      Ord0: function () {
          return ordSecond;
      }
  };
  var boundedMinute = {
      bottom: 0,
      top: 59,
      Ord0: function () {
          return ordMinute;
      }
  };
  var boundedMillisecond = {
      bottom: 0,
      top: 999,
      Ord0: function () {
          return ordMillisecond;
      }
  };
  var boundedHour = {
      bottom: 0,
      top: 23,
      Ord0: function () {
          return ordHour;
      }
  };
  var boundedEnumSecond = {
      cardinality: 60,
      toEnum: function (n) {
          if (n >= 0 && n <= 59) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedSecond;
      },
      Enum1: function () {
          return enumSecond;
      }
  };
  var enumSecond = {
      succ: (function () {
          var $28 = Data_Enum.toEnum(boundedEnumSecond);
          var $29 = Data_Enum.fromEnum(boundedEnumSecond);
          return function ($30) {
              return $28((function (v) {
                  return v + 1 | 0;
              })($29($30)));
          };
      })(),
      pred: (function () {
          var $31 = Data_Enum.toEnum(boundedEnumSecond);
          var $32 = Data_Enum.fromEnum(boundedEnumSecond);
          return function ($33) {
              return $31((function (v) {
                  return v - 1 | 0;
              })($32($33)));
          };
      })(),
      Ord0: function () {
          return ordSecond;
      }
  };
  var boundedEnumMinute = {
      cardinality: 60,
      toEnum: function (n) {
          if (n >= 0 && n <= 59) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedMinute;
      },
      Enum1: function () {
          return enumMinute;
      }
  };
  var enumMinute = {
      succ: (function () {
          var $34 = Data_Enum.toEnum(boundedEnumMinute);
          var $35 = Data_Enum.fromEnum(boundedEnumMinute);
          return function ($36) {
              return $34((function (v) {
                  return v + 1 | 0;
              })($35($36)));
          };
      })(),
      pred: (function () {
          var $37 = Data_Enum.toEnum(boundedEnumMinute);
          var $38 = Data_Enum.fromEnum(boundedEnumMinute);
          return function ($39) {
              return $37((function (v) {
                  return v - 1 | 0;
              })($38($39)));
          };
      })(),
      Ord0: function () {
          return ordMinute;
      }
  };
  var boundedEnumMillisecond = {
      cardinality: 1000,
      toEnum: function (n) {
          if (n >= 0 && n <= 999) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedMillisecond;
      },
      Enum1: function () {
          return enumMillisecond;
      }
  };
  var enumMillisecond = {
      succ: (function () {
          var $40 = Data_Enum.toEnum(boundedEnumMillisecond);
          var $41 = Data_Enum.fromEnum(boundedEnumMillisecond);
          return function ($42) {
              return $40((function (v) {
                  return v + 1 | 0;
              })($41($42)));
          };
      })(),
      pred: (function () {
          var $43 = Data_Enum.toEnum(boundedEnumMillisecond);
          var $44 = Data_Enum.fromEnum(boundedEnumMillisecond);
          return function ($45) {
              return $43((function (v) {
                  return v - 1 | 0;
              })($44($45)));
          };
      })(),
      Ord0: function () {
          return ordMillisecond;
      }
  };
  var boundedEnumHour = {
      cardinality: 24,
      toEnum: function (n) {
          if (n >= 0 && n <= 23) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedHour;
      },
      Enum1: function () {
          return enumHour;
      }
  };
  var enumHour = {
      succ: (function () {
          var $46 = Data_Enum.toEnum(boundedEnumHour);
          var $47 = Data_Enum.fromEnum(boundedEnumHour);
          return function ($48) {
              return $46((function (v) {
                  return v + 1 | 0;
              })($47($48)));
          };
      })(),
      pred: (function () {
          var $49 = Data_Enum.toEnum(boundedEnumHour);
          var $50 = Data_Enum.fromEnum(boundedEnumHour);
          return function ($51) {
              return $49((function (v) {
                  return v - 1 | 0;
              })($50($51)));
          };
      })(),
      Ord0: function () {
          return ordHour;
      }
  };
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["boundedEnumMillisecond"] = boundedEnumMillisecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Control_Category = $PS["Control.Category"];
  var toDuration = function (dict) {
      return dict.toDuration;
  };
  var durationMilliseconds = {
      fromDuration: Control_Category.identity(Control_Category.categoryFn),
      toDuration: Control_Category.identity(Control_Category.categoryFn)
  };
  exports["toDuration"] = toDuration;
  exports["durationMilliseconds"] = durationMilliseconds;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.DateTime"] = $PS["Data.DateTime"] || {};
  var exports = $PS["Data.DateTime"];
  var $foreign = $PS["Data.DateTime"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var toRecord = function (v) {
      return {
          year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
          month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
          day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
          hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
          minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
          second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
          millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
      };
  };
  var diff = function (dictDuration) {
      return function (dt1) {
          return function (dt2) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
          };
      };
  };
  exports["DateTime"] = DateTime;
  exports["diff"] = diff;
})(PS);
(function(exports) {
  "use strict";

  exports.toDateTimeImpl = function (ctor) {
    return function (instant) {
      var dt = new Date(instant);
      return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
    };
  };
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var $foreign = $PS["Data.DateTime.Instant"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Time = $PS["Data.Time"];
  var toDateTime = (function () {
      var mkDateTime = function (y) {
          return function (mo) {
              return function (d) {
                  return function (h) {
                      return function (mi) {
                          return function (s) {
                              return function (ms) {
                                  return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                              };
                          };
                      };
                  };
              };
          };
      };
      return $foreign.toDateTimeImpl(mkDateTime);
  })();
  exports["toDateTime"] = toDateTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["for_"] = for_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var functorLazy = {
      map: function (f) {
          return function (l) {
              return $foreign.defer(function (v) {
                  return f($foreign.force(l));
              });
          };
      }
  };
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];             
  var traverse = function (dict) {
      return dict.traverse;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["traverse"] = traverse;
  exports["for"] = $$for;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.Lazy.Types"] = $PS["Data.List.Lazy.Types"] || {};
  var exports = $PS["Data.List.Lazy.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var step = (function () {
      var $225 = Data_Newtype.unwrap();
      return function ($226) {
          return Data_Lazy.force($225($226));
      };
  })();
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return step(ys);
                  };
                  if (v instanceof Cons) {
                      return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 104, column 5 - line 104, column 21): " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
          };
      }
  };
  var monoidList = {
      mempty: nil,
      Semigroup0: function () {
          return semigroupList;
      }
  };
  var functorList = {
      map: function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 113, column 5 - line 113, column 17): " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
          };
      }
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = {
      foldr: function (op) {
          return function (z) {
              return function (xs) {
                  var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
              };
          };
      },
      foldl: function (op) {
          var go = function ($copy_b) {
              return function ($copy_xs) {
                  var $tco_var_b = $copy_b;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(b, xs) {
                      var v = step(xs);
                      if (v instanceof Nil) {
                          $tco_done = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = op(b)(v.value0);
                          $copy_xs = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 128, column 7 - line 130, column 40): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_b, $copy_xs);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (b) {
                  return function (a) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var traversableList = {
      traverse: function (dictApplicative) {
          return function (f) {
              return Data_Foldable.foldr(foldableList)(function (a) {
                  return function (b) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
                  };
              })(Control_Applicative.pure(dictApplicative)(nil));
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorList;
      },
      Foldable1: function () {
          return foldableList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["nil"] = nil;
  exports["cons"] = cons;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.List.Lazy"] = $PS["Data.List.Lazy"] || {};
  var exports = $PS["Data.List.Lazy"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Maybe = $PS["Data.Maybe"];                                          
  var uncons = function (xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy (line 288, column 13 - line 290, column 44): " + [ v.constructor.name ]);
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                      return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (as) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(a)(as));
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 164, column 1 - line 164, column 62): " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  exports["replicateM"] = replicateM;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["fill"] = $foreign.fill;
  exports["arc"] = $foreign.arc;
  exports["clearRect"] = $foreign.clearRect;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Ball = $PS["Ball"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Now = $PS["Effect.Now"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var _update = function (wh) {
      return function (now) {
        
          // すべての組み合わせに対して衝突処理をおこなう
  var collision = function (dt) {
              return function (xs) {
                  var v = Data_List_Lazy.uncons(xs);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(Data_List_Lazy_Types.monoidList);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var fn = function (ys) {
                          return Data_Traversable["for"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_List_Lazy_Types.traversableList)(ys)(function (v2) {
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v1) {
                                  var r = Ball.colllisionWith(dt)({
                                      v1: v1,
                                      v2: v2
                                  });
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(r.v1))(function () {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(r.v2);
                                  });
                              });
                          });
                      };
                      var v1 = Control_Monad_State.runState(fn(v.value0.tail))(v.value0.head);
                      return Data_List_Lazy_Types.cons(v1.value1)(collision(dt)(v1.value0));
                  };
                  throw new Error("Failed pattern match at Main (line 78, column 21 - line 93, column 45): " + [ v.constructor.name ]);
              };
          };
          return Control_Monad_State.execState(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (m) {
              return Data_DateTime.diff(Data_Time_Duration.durationMilliseconds)(Data_DateTime_Instant.toDateTime(now))(Data_DateTime_Instant.toDateTime(m.last));
          }))(function (v) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (b) {
                  var $16 = {};
                  for (var $17 in b) {
                      if ({}.hasOwnProperty.call(b, $17)) {
                          $16[$17] = b[$17];
                      };
                  };
                  $16.last = now;
                  return $16;
              }))(function () {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (b) {
                      var $19 = {};
                      for (var $20 in b) {
                          if ({}.hasOwnProperty.call(b, $20)) {
                              $19[$20] = b[$20];
                          };
                      };
                      $19.balls = Data_Functor.map(Data_List_Lazy_Types.functorList)(Ball.reflect(v)(wh))(b.balls);
                      return $19;
                  }))(function () {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (b) {
                          var $22 = {};
                          for (var $23 in b) {
                              if ({}.hasOwnProperty.call(b, $23)) {
                                  $22[$23] = b[$23];
                              };
                          };
                          $22.balls = collision(v)(b.balls);
                          return $22;
                      }))(function () {
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (b) {
                              var $25 = {};
                              for (var $26 in b) {
                                  if ({}.hasOwnProperty.call(b, $26)) {
                                      $25[$26] = b[$26];
                                  };
                              };
                              $25.balls = Data_Functor.map(Data_List_Lazy_Types.functorList)(Ball.move(v))(b.balls);
                              return $25;
                          }))(function () {
                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Unit.unit);
                          });
                      });
                  });
              });
          }));
      };
  };
  var _render = function (canvas) {
      return function (m) {
          return function __do() {
              var ctx = Graphics_Canvas.getContext2D(canvas)();
              var width = Graphics_Canvas.getCanvasWidth(canvas)();
              var height = Graphics_Canvas.getCanvasHeight(canvas)();
              Graphics_Canvas.clearRect(ctx)({
                  x: 0.0,
                  y: 0.0,
                  width: width,
                  height: height
              })();
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Lazy_Types.foldableList)(m.balls)(function (b) {
                  return function __do() {
                      Graphics_Canvas.setFillStyle(ctx)(b.color)();
                      Graphics_Canvas.beginPath(ctx)();
                      Graphics_Canvas.arc(ctx)({
                          x: b.pos.x,
                          y: b.pos.y,
                          radius: b.radius,
                          start: 0.0,
                          end: 2.0 * $$Math.pi
                      })();
                      return Graphics_Canvas.fill(ctx)();
                  };
              })();
          };
      };
  };
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      if (v instanceof Data_Maybe.Nothing) {
          return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("no canvas found")();
      };
      if (v instanceof Data_Maybe.Just) {
          Graphics_Canvas.setCanvasWidth(v.value0)(500.0)();
          Graphics_Canvas.setCanvasHeight(v.value0)(500.0)();
          var balls = Data_List_Lazy.replicateM(Effect.monadEffect)(20)(Ball.randomBall)();
          var win = Web_HTML.window();
          var animate = function (member) {
              return function __do() {
                  _render(v.value0)(member)();
                  var last = Effect_Now.now();
                  var member$prime = _update({
                      width: 500.0,
                      height: 500.0
                  })(last)(member);
                  Web_HTML_Window.requestAnimationFrame(animate(member$prime))(win)();
                  return Data_Unit.unit;
              };
          };
          var last = Effect_Now.now();
          animate({
              balls: balls,
              last: last
          })();
          return Data_Unit.unit;
      };
      throw new Error("Failed pattern match at Main (line 25, column 9 - line 51, column 20): " + [ v.constructor.name ]);
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();